#!/bin/bash

is_git_repo() {
  git rev-parse --show-toplevel > /dev/null 2>&1
  result=$?
  if test $result != 0; then
    >&2 echo 'Not a git repo!'
    exit $result
  fi
}

is_git_repo

read -e -p "Enter GIT_COMMITTER_EMAIL: " comm_mail

if [ -z "${comm_mail}" ]; then
  echo "COMMITTER_EMAIL is required."
  exit 1
fi

read -e -p "Enter GIT_COMMITTER_NAME: " comm_name

if [ -z "${comm_name}" ]; then
  echo "COMMITTER_NAME is required."
  exit 1
fi

read -e -p "Enter GIT_COMMITTER_DATE: " comm_date

if [ -z "${comm_date}" ]; then
  echo "COMMITTER_DATE not given. Using current time."
  comm_date="$(date --iso-8601=seconds)"
fi

read -e -p "Enter GIT_AUTHOR_EMAIL: " auth_mail

if [ -z "${auth_mail}" ]; then
  echo "AUTHOR_EMAIL not given. Using COMMITTER_EMAIL"
  auth_mail="$comm_mail"
fi

read -e -p "Enter GIT_AUTHOR_NAME: " auth_name

if [ -z "${auth_name}" ]; then
  echo "AUTHOR_NAME not given. Using COMMITTER_NAME"
  auth_name="$comm_name"
fi

read -e -p "Enter GIT_AUTHOR_DATE: " auth_date

if [ -z "${auth_date}" ]; then
  echo "AUTHOR_DATE not given. Using COMMITTER_DATE"
  auth_date="$comm_date"
fi

read -e -p "Enter last good commit hash: " commit

if [ -z "${commit}" ]; then
  echo "Commit hash is required."
  exit 1
fi

export GIT_COMMITTER_EMAIL="$comm_mail"
export GIT_COMMITTER_NAME="$comm_name"
export GIT_COMMITTER_DATE="$comm_date"
export GIT_AUTHOR_EMAIL="$auth_mail"
export GIT_AUTHOR_NAME="$auth_name"
export GIT_AUTHOR_DATE="$auth_date"

echo -e "\n"

echo "Rewriting authorship and committership of all commits after \"$commit\""
echo "Committing as \"$comm_name <$comm_mail>, $comm_date\""
echo "Authoring as \"$auth_name <$auth_mail>, $auth_date\""

echo -e "\n"

git rebase --no-verify -r "$commit" --exec 'git commit --amend --no-edit --reset-author'

export -n GIT_COMMITTER_EMAIL GIT_COMMITTER_NAME GIT_COMMITTER_DATE GIT_AUTHOR_EMAIL GIT_AUTHOR_NAME GIT_AUTHOR_DATE
